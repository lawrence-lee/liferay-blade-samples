sourceSets {
	testFunctional {
		java {
			compileClasspath += main.output + test.output
			runtimeClasspath += main.output + test.output
			srcDir file('src/testFunctional/java')
		}
		resources.srcDir file('src/testFunctional/resources')
	}
}

configurations {
	testFunctionalCompile.extendsFrom testCompile
	testFunctionalRuntime.extendsFrom testRuntime
}

dependencies {
	compileOnly "com.liferay.portal:com.liferay.portal.kernel:2.0.0"
	compileOnly "javax.portlet:portlet-api:2.0"
	compileOnly "javax.servlet:javax.servlet-api:3.0.1"
	compileOnly "org.osgi:org.osgi.service.component.annotations:1.3.0"

	testCompile group: "biz.aQute.bnd", name: "biz.aQute.remote.api", version: "3.3.0"
	testCompile group: "com.liferay.arquillian", name: "com.liferay.arquillian.arquillian-container-liferay", version: "1.0.6"
	testCompile group: "junit", name: "junit", version: "4.12"
	testCompile group: "org.jboss.arquillian.graphene", name: "graphene-webdriver", version: "2.1.0.Final"
	testCompile group: "org.jboss.arquillian.junit", name: "arquillian-junit-container", version: "1.1.11.Final"
}

startTestableTomcat {
	checkTimeout = 10 * 60 * 1000
}

task testFunctional(type: Test) {
	testClassesDir = sourceSets.testFunctional.output.classesDir
	classpath = sourceSets.testFunctional.runtimeClasspath
	outputs.upToDateWhen { false }

	dependsOn ":initBundle", startTestableTomcat

	project(':apps:action-command-portlet').afterEvaluate { project ->
		dependsOn project.jar
		systemProperty 'actionCommandPortletJarFile', project.jar.archivePath
	}

	project(':apps:freemarker-portlet').afterEvaluate { project ->
		dependsOn project.jar
		systemProperty 'freemarkerPortletJarFile', project.jar.archivePath
	}

	project(':apps:jsp-portlet').afterEvaluate { project ->
		dependsOn project.jar
		systemProperty 'jspPortletJarFile', project.jar.archivePath
	}

	project(':apps:osgi-portlet').afterEvaluate { project ->
		dependsOn project.jar
		systemProperty 'osgiPortletJarFile', project.jar.archivePath
	}

	project(':apps:render-command-portlet').afterEvaluate { project ->
		dependsOn project.jar
		systemProperty 'renderCommandPortletJarFile', project.jar.archivePath
	}

	project(':apps:shared-language-keys:language').afterEvaluate { project ->
		dependsOn project.jar
		systemProperty 'languageJarFile', project.jar.archivePath
	}

	project(':apps:shared-language-keys:language-web').afterEvaluate { project ->
		dependsOn project.jar
		systemProperty 'languageWebJarFile', project.jar.archivePath
	}

	project(':extensions:control-menu-entry').afterEvaluate { project ->
		dependsOn project.jar
		systemProperty 'controlMenuEntryJarFile', project.jar.archivePath
	}

	project(':extensions:portlet-configuration-icon').afterEvaluate { project ->
		dependsOn project.jar
		systemProperty 'portletConfigurationIconJarFile', project.jar.archivePath
	}

	project(':extensions:portlet-toolbar-contributor').afterEvaluate { project ->
		dependsOn project.jar
		systemProperty 'portletToolbarContributorJarFile', project.jar.archivePath
	}

	finalizedBy {
		stopTestableTomcat
	}

	doLast {
		delete new File("target/drone-phantomjs")
	}
}

stopTestableTomcat {
	doLast {
		delete new File(liferay.liferayHome, "data")
	}
}

check.dependsOn testFunctional